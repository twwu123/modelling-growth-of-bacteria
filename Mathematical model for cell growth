Mathematical model for cell growth
hold on
clear
%Setting initial values, note that these values are taken from experimental 
%results and concentrations are all in micromoles
koff = 10; % Rate of antibiotic-ribosome unbinding
Pin = 100/5.5; %Permeability into the cell
kon = 5; %Rate of antibiotic-ribosome binding
Pout = 50/5.5; %Permeability out of the cell
rmin = 19.3; %minimum number of free ribosomes for growth
rmax = 65.8; %maximum number of free ribosomes for linear relationship
aex0=0.3; %external antibiotic concentration
kt0 = 0.025; %translational capacity
radius=0.4; %initial radius
a1=1.3; 
 
j = 1; 
k = 1;
 
syms rv lv
syms rs ls
 
%Setting time steps and final time for termination
tf=50;
dt=0.005;
nsteps=tf/dt;
 
%Initializing vectors for each variable
 
a=NaN(1,nsteps);
ru=NaN(1,nsteps);
rb=NaN(1,nsteps);
V=NaN(1,nsteps);
SA=NaN(1,nsteps);
grate=NaN(1,nsteps);
tm=NaN(1,nsteps);
l=NaN(1,nsteps);
r=NaN(1,nsteps);
SAV=NaN(1,nsteps);
V0=NaN(1,nsteps);
 
 
 
%Setting the first value for each variable
 
a(1)=0;
ru(1)= normrnd(100,1);
rb(1)=0;
V(1)=normrnd(1.3,0.1); 
SA(1)=2*V(1)/radius;
 
%Finding length and radius of cell
eq1 = pi*(rv^2)*lv == V(1);
eq2 = 2*pi*rv*lv  == SA(1);
solu = solve(eq1,eq2);
l(1) = double(solu.lv);
r(1) = double(solu.rv);
 
%Initializing values for growth rate, time, volume and added volume
grate(1)=(ru(1) -rmin)*kt0;
tm(1)=0;
Vin = V(1);
addedvol = normrnd(1,0.1);
 
tj=0;
 
%Number of data points for plotting
 
dsteps = 50;
 
 
for aex = linspace(aex0,10*aex0,dsteps)
    
    for i=2:nsteps
        
        tm(i)=tm(i-1)+dt;
 
        if V(i-1) < a1*Vin + addedvol %Adder model
            %Differential equation solver
            a(i)=a(i-1)+dt*(-(grate(i-1))*a(i-1) - kon*a(i-1)*(ru(i-1) - rmin) + koff*rb(i-1) + Pin*(SA(i-1)/V(i-1))*aex - Pout*(SA(i-1)/V(i-1))*a(i-1));
            ru(i)=ru(i-1) + dt*(-(grate(i-1))*ru(i-1) - kon*a(i-1)*(ru(i-1) - rmin) + koff*rb(i-1) + (grate(i-1)*((rmax - ((grate(i-1)*(rmax - rmin)*((1/grate0)-(1/(kt*(rmax - rmin))))))))));
            rb(i)= rb(i-1) + dt*(-(grate(i-1))*rb(i-1) + kon*a(i-1)*(ru(i-1) - rmin) - koff*rb(i-1));
            SA(i)=SA(i-1) + dt*(((-0.38*a(i-1)+5.77)*(grate(i-1))*V(i-1)));
            V(i)=V(i-1) + dt*(((grate(i-1))*V(i-1)));
            grate(i)=(ru(i) -rmin)*kt;
            tj=tj+dt;
            
            
        else
            %When a cell splits, halve necessary variables and maintain
            %generational continuity
            a(i) = a(i-1);
            ru(i) = ru(i-1);
            rb(i)= rb(i-1);
            SAV(j)=SA(i-1   )/V(i-1);
            SA(i) = normrnd(0.5,0.04)*SA(i-1);
            V(i) = normrnd(0.5,0.04)*V(i-1);
            Vin = V(i);
            V0(j)=Vin;
            divt(j) = tj;
            
            eqs1 = pi*(rs^2)*ls == V(i);
            eqs2 = 2*pi*rs*ls == SA(i);
            solus = solve(eqs1,eqs2);
            l(j) = double(solus.ls);
            r(j) = double(solus.rs);
            j = j + 1;
            grate(i) = (ru(i) -rmin)*kt;
            tj=0;
        end
        
    end
    %Average shape statistics
    avgr(k) = nanmean(r);
    avgl(k) = nanmean(l);
    avgSAV(k) = nanmean(SAV);
    avgV0(k) = nanmean(V0);
    avgrate(k) = nanmean(grate);
    k = k+1;
    
    
   
end
 
 
figure(1)
plot(linspace(aex0,10*aex0,dsteps),avgr,'k.')
xlabel('Antibiotic concentration (\mu M)')
ylabel('Average birth radius r_0 (\mu m)')
 
figure(2)
plot(linspace(aex0,10*aex0,dsteps),avgl,'r.')
xlabel('Antibiotic concentration (\mu M)')
ylabel('Average birth length l_0 (\mu m)')
 
figure(3)
plot(linspace(aex0,10*aex0,dsteps),avgSAV,'b.')
xlabel('Antibiotic concentration (\mu M)')
ylabel('Average birth SA/V ratio (m^-1)')
 
figure(4)
plot(tm, V, 'r.')
xlabel('Time (h)')
ylabel('Volume of cell (m^3)')
 
 
